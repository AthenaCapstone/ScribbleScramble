{"version":3,"sources":["AppCSS.js","Socket.js","WritingCanvas.js","utility/utilityProperties.js","Palette.js","DrawingCanvas.js","LandingPage.js","EndGame.js","Modal.js","CombinedCanvas.js","Routes.js","App.js","reportWebVitals.js","index.js"],"names":["Body","styled","div","Header","header","LandingPage","PlayArea","StyledModal","Title","Link","h1","Title2","h2","Paragraph","p","StyledCanvas","canvas","CanvasBackground","Palette","BrushSizesContainer","SmallBrushBtn","button","MedBrushBtn","LargeBrushBtn","SelectedColor","PaletteColors","StartDrawImg","StartWriteImg","StartDrawBtn","StartWriteBtn","LandingBtns","LandingButton","PngButton","AddTxtBtn","DownloadBtn","socket","socketIOClient","on","console","log","WritingCanvas","useState","textCanvas","setTextCanvas","font","setFont","useEffect","Object","keys","length","value","loadFromJSON","fabric","Canvas","height","width","isContentEditable","id","style","marginTop","htmlFor","onChange","evt","target","getActiveObject","setSelectionStyles","fontFamily","renderAll","onClick","newText","IText","left","top","add","canvasJSON","toJSON","emit","handleTextBtn","lightColors","red","orange","yellow","green","blue","purple","white","darkColors","dkred","dkorange","dkyellow","dkgreen","dkblue","dkpurple","black","PaletteComp","currColor","setColor","values","map","color","backgroundColor","DrawingCanvas","setCanvas","brushSize","setBrushSize","initCanvas","updateBrush","freeDrawingBrush","drawingModeEl","document","getElementById","isDrawingMode","brush","drawingCanvasJSON","handleDraw","marginRight","fontWeight","fontSize","src","clear","LandingPageComp","href","EndGame","ModalComp","isOpen","setIsOpen","toggleModal","onLoad","setTimeout","CombinedCanvas","handleDraworWrite","Routes","exact","path","component","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.b947d614.chunk.js","sourcesContent":["import styled from \"styled-components\";\nimport Modal from 'styled-react-modal';\nimport { BrowserRouter as Link } from \"react-router-dom\";\n\n/*\nSPACE IS INCLUDED FOR ADDITIONAL ELEMENTS TO BE ADDED IN \nTHEIR APPROPRIATE SECTIONS. PLEASE UPDATE TOC AS NEEDED.\n\n*** Table of Contents ***\n\n - Line 15: Container Elements\n - Line 70: Basic Elements\n - Line 110: Canvas Elements\n - Line 150: Image Elements\n - Line 180: Button Elements\n\n*/\n\n// Container Elements\n\nexport const Body = styled.div`\n  display: flex;\n  flex-flow: column wrap;\n  width: 100%;\n  background-image: url(./images/background.jpg);\n`;\n\nexport const Header = styled.header`\n  background: #000000\n  justify-content: center;\n  align-items: center;\n  width: 100%;\n  height: 150px;\n  border-radius: 20px;\n  no-repeat: true\n`;\n\nexport const LandingPage = styled.div`\n  background-color: #ecf6f0;\n  height: 600px;\n  display: flex;\n  justify-content: center;\n  width: 800px;\n  margin: auto;\n  margin-top: 25px;\n  margin-bottom: 250px;\n`;\n\nexport const PlayArea = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nexport const StyledModal = styled.div`\n  width: 20rem;\n  height: 20rem;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\n\n\n\n\n\n\n\n\n// Basic Elements\nexport const StyledLink = styled(Link)`\n  color: white;\n  font-weight: bold;\n`;\n\nexport const Title = styled.h1`\n  font-size: 2em;\n  text-align: center;\n  color: #982649;\n  background-color: black;\n  width: 800px;\n  height: 145px;\n  margin: auto;\n  margin-top: 20px;\n  border-radius: 20px;\n`;\n\nexport const Title2 = styled.h2`\n  font-size: 2em;\n  text-align: center;\n  color: white;\n`;\n\nexport const Paragraph = styled.p`\n  align-self: center;\n  position: absolute;\n  top: 40%;\n  font-size: 1.2em;\n  text-align: center;\n  color: black;\n`;\n\n// Canvas Elements\n\nexport const StyledCanvas = styled.canvas`\n  width: 450px;\n  margin: auto;\n  border: 3px outset black;\n  border-radius: 3px;\n  z-index: 2;\n`;\n\nexport const CanvasBackground = styled.div`\n  display: flex;\n  width: 800px;\n  border-radius: 3px;\n  background: white;\n  z-index: 1;\n  margin-bottom: 10px;\n`;\n\n// this styles all buttons in the \"palette\"-> brush type, color, size etc\nexport const Palette = styled.div`\n  display: flex;\n  justify-content: center;\n  background: #4c9c8a;\n  width: 800px;\n  height: 120px;\n  margin: auto;\n  margin-top: 10px;\n  margin-bottom: 125px;\n  border-radius: 20px;\n`;\n\n\n//this is for just the color swatches in the palette\n\nexport const BrushSizesContainer = styled.div`\n  display: flex;\n  height: 20px;\n  margin-left: 10px;\n  margin-top: 10px;\n`;\n\nexport const SmallBrushBtn = styled.button`\n  height: 35px;\n  width: 35px;\n  border-radius: 6px;\n  border: 2px solid darkgrey;\n  background-color: #4c9c8a;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const MedBrushBtn = styled.button`\n  height: 35px;\n  width: 35px;\n  border-radius: 6px;\n  border: 2px solid darkgrey;\n  background-color: #4c9c8a;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const LargeBrushBtn = styled.button`\n  height: 35px;\n  width: 35px;\n  border-radius: 6px;\n  border: 2px solid darkgrey;\n  background-color: #4c9c8a;\n  margin-right: 10px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nexport const SelectedSize = styled.div`\n  border-size: 5px;\n  border-color: black;\n`;\n\nexport const SelectedColor = styled.div`\n  display: flex;\n  margin-top: 10px;\n  margin-right: 0px;\n`;\n\nexport const PaletteColors = styled.div`\n  margin: 5px;\n  margin-left: 8px;\n  margin-right: 0px;\n`;\n\nexport const PaletteBtns = styled.div`\n  margin-top: 10px;\n`;\n\n\n\n// Image Elements\n\n\nexport const StartDrawImg = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 25%;\n  height: 50%;\n`;\n\nexport const StartWriteImg = styled.div`\n  display: flex;\n  justify-content: center;\n  width: 10%;\n  height: 50%;\n`;\n\n// Button Elements\n\nexport const Button = styled.button`\n  border-radius: 3px;\n  border: 2px solid darkgrey;\n  align: center;\n  color: #216858\n  margin: 0 1em;\n  height: 30px;\n  width: 80px;\n  `;\n\nexport const StartDrawBtn = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport const StartWriteBtn = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport const LandingBtns = styled.div`\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: 10px;\n  margin-top: 5px;\n`;\n\nexport const LandingButton = styled.button`\n  border-radius: 6px;\n  border: 2px solid darkgrey;\n  align: center;\n  margin: 0 1em;\n  padding: 15px;\n  background-color: #134d44;\n  color: white;\n  font-size: 1.2em;\n  font-weight: bold;\n`;\n\nexport const ClearButton = styled.button`\n  border-radius: 6px;\n  border: 2px solid darkgrey;\n  align: center;\n  margin: 0 1em;\n  margin-top: 10px;\n  height: 28px;\n  width: 55px;\n  background-color: #134d44;\n  color: white;\n`;\n\nexport const PngButton = styled.button`\n  border-radius: 6px;\n  border: 2px solid darkgrey;\n  align: center;\n  margin: 0 1em;\n  margin-top: 10px;\n  margin-right: 0px;\n  height: 28px;\n  width: 33px;\n  background-color: #4c9c8a;\n  color: white;\n`;\n\n// export const brushBtn= style.button\n\nexport const AddTxtBtn = styled.button`\n  border-radius: 6px;\n  border: 2px solid darkgrey;\n  align: center;\n  margin: 0 1em;\n  margin-top: 5px;\n  height: 28px;\n  width: 80px;\n  background-color: #134d44;\n  color: white;\n`;\n\nexport const DownloadBtn = styled.button`\n  border-radius: 6px;\n  border: 2px solid darkgrey;\n  align: center;\n  position: absolute;\n  top: 50%;\n  height: 10%;\n  width: 15%;\n  background-color: #134d44;\n  color: white;\n  font-size: 1.2em;\n  font-weight: bold;\n`;\n","import socketIOClient from \"socket.io-client\";\nconst SERVER = \"http://127.0.0.1:4001\";\n\nconst socket = socketIOClient(SERVER);\n\nsocket.on(\"connect\", () => {\n  console.log(\"i'm connected with the front end!\");\n});\nexport default socket;\n","import React, { useState, useEffect } from \"react\";\nimport { fabric } from \"fabric\";\n\nimport {\n  Title2,\n  Palette,\n  AddTxtBtn,\n} from \"./AppCSS\";\n\nimport { StyledCanvas } from \"./AppCSS\";\nimport { PlayArea } from \"./AppCSS\";\nimport { CanvasBackground } from \"./AppCSS\";\nimport socket from \"./Socket\";\n\nconst WritingCanvas = () => {\n  const initCanvas = () => {\n    const newCanvas = new fabric.Canvas(\"canvas\", {\n      height: 600,\n      width: 800,\n      isContentEditable: true,\n    });\n\n    return newCanvas;\n  };\n  const [textCanvas, setTextCanvas] = useState({});\n  const [font, setFont] = useState(\"arial\");\n\n  useEffect(() => {\n    if (!Object.keys(textCanvas).length) {\n      setTextCanvas(initCanvas());\n    } else {\n      socket.on(\"create new text box\", (value) => {\n        console.log(\"front end heard create new text box\");\n        textCanvas.loadFromJSON(value);\n        setTextCanvas(textCanvas);\n      });\n    }\n  }, [textCanvas]);\n\n  const handleTextBtn = () => {\n    const newText = new fabric.IText(\"Type here...\", {\n      left: 150,\n      top: 100,\n      isContentEditable: true,\n      fontFamily: font,\n    });\n\n    setTextCanvas(textCanvas.add(newText).renderAll());\n    let canvasJSON = textCanvas.toJSON();\n    socket.emit(\"add text box\", canvasJSON);\n  };\n\n  const changeFont = (evt) => {\n    setFont(evt.target.value);\n    textCanvas.getActiveObject().setSelectionStyles({\n      fontFamily: font,\n    });\n    textCanvas.renderAll();\n  };\n\n  return (\n    <div>\n      <Title2></Title2>\n\n      <PlayArea>\n        <CanvasBackground>\n          <StyledCanvas id=\"canvas\"></StyledCanvas>\n        </CanvasBackground>\n      </PlayArea>\n      <Palette>\n        <div id=\"text-options\" style={{ marginTop: \"10px\" }}>\n          <label htmlFor=\"font-family\">Font:</label>\n          <select id=\"font-family\" value={font} onChange={changeFont}>\n            <option value=\"Arial\">Arial</option>\n            <option value=\"comic sans ms\">Comic Sans MS</option>\n            <option value=\"impact\">Impact</option>\n            <option value=\"monaco\">Monaco</option>\n          </select>\n        </div>\n        <AddTxtBtn onClick={() => handleTextBtn()}>Add Text</AddTxtBtn>\n      </Palette>\n    </div>\n  );\n};\n\nexport default WritingCanvas;\n","// lightColors[color]\nexport const lightColors = {\n  red: \"#FE797B\",\n  orange: \"#FFB750\",\n  yellow: \"#FFEA56\",\n  green: \"#8FE968\",\n  blue: \"#36CEDC\",\n  purple: \"#A587CA\",\n  white: \"white\",\n};\n\nexport const darkColors = {\n  dkred: \"#C1301C\",\n  dkorange: \"#C96112\",\n  dkyellow: \"#C4A705\",\n  dkgreen: \"#177245\",\n  dkblue: \"#2E5793\",\n  dkpurple: \"#4B2882\",\n  black: \"black\",\n};\n\nconst sizes = {\n  small: {\n    name: \"brushSize\",\n    value: \"5\",\n    icon: \"/images/point.png\",\n    size: \"35%\",\n  },\n\n  medium: {\n    name: \"brushSize\",\n    value: \"10\",\n    icon: \"/images/point.png\",\n    size: \"60%\",\n  },\n\n  large: {\n    name: \"brushSize\",\n    value: \"20\",\n    icon: \"/images/point.png\",\n    size: \"95%\",\n  },\n};\n\nexport const iconBackgrounds = [\n  \"red\",\n  \"orange\",\n  \"yellow\",\n  \"green\",\n  \"blue\",\n  \"purple\",\n];\n","import React, { useState, useEffect } from \"react\";\nimport { lightColors, darkColors, tools } from \"./utility/utilityProperties.js\";\n\nconst PaletteComp = ({ currColor, setColor }) => {\n  return (\n    <div id=\"palette\">\n      <div>\n        {Object.values(lightColors).map((color) => {\n          return (\n            <button\n              key={color}\n              onClick={() => {\n                setColor(color);\n              }}\n              style={{\n                backgroundColor: color,\n                height: \"15px\",\n                width: \"5px\",\n              }}\n            ></button>\n          );\n        })}\n      </div>\n      <div>\n        {Object.values(darkColors).map((color) => {\n          return (\n            <button\n              key={color}\n              onClick={() => {\n                setColor(color);\n              }}\n              style={{\n                backgroundColor: color,\n                height: \"15px\",\n                width: \"10px\",\n              }}\n            ></button>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default PaletteComp;\n","import React, { useState, useEffect } from \"react\";\nimport { fabric } from \"fabric\";\nimport {\n  Title2,\n  StyledCanvas,\n  PlayArea,\n  CanvasBackground,\n  Palette,\n  PngButton,\n  PaletteColors,\n  SmallBrushBtn,\n  MedBrushBtn,\n  LargeBrushBtn,\n  BrushSizesContainer,\n  SelectedColor,\n} from \"./AppCSS\";\nimport PaletteComp from \"./Palette\";\nimport socket from \"./Socket\";\n\n//storing color, brush size and canvas in state\n\nconst DrawingCanvas = () => {\n  const [canvas, setCanvas] = useState(\"\");\n  const [currColor, setColor] = useState(\"#005E7A\");\n  const [brushSize, setBrushSize] = useState(11);\n\n  //creates initial canvas\n  useEffect(() => {\n    setCanvas(initCanvas());\n  }, []);\n\n  // when canvas is first created we initialize the brush\n  // if canvas changes we convert it to JSON\n  //and send that over sockets\n  // however UseEffect does not know when we're drawing\n  // because we don't have need a change handler to draw so we don't set the canvas\n  // when we do, so the canvas in state doesn't update\n\n  useEffect(() => {\n    if (canvas) {\n      updateBrush();\n\n      socket.on(\"load new lines\", (value) => {\n        console.log(\"drawing received in front end: \", value);\n        canvas.loadFromJSON(value);\n        setCanvas(canvas);\n      });\n    }\n  }, [canvas]);\n\n  useEffect(() => {\n    console.log(\"canvas is updating\", canvas);\n    if (canvas) {\n      // let drawingCanvasJSON = canvas.toJSON();\n      // console.log(\"front end emiting drawingtoJSON:\", drawingCanvasJSON);\n      // socket.emit(\"send new lines\", drawingCanvasJSON);\n    }\n  }, [canvas]);\n\n  useEffect(() => {\n    if (currColor) {\n      updateBrush();\n    }\n  }, [currColor]);\n\n  useEffect(() => {\n    if (brushSize && canvas.freeDrawingBrush) {\n      updateBrush();\n    }\n  }, [brushSize]);\n\n  let drawingModeEl = document.getElementById(\"drawing-mode-selector\");\n\n  const initCanvas = () =>\n    new fabric.Canvas(\"canvas\", {\n      height: 600,\n      width: 800,\n      backgroundColor: \"white\",\n      isDrawingMode: true,\n    });\n\n  function updateBrush() {\n    if (canvas) {\n      if (!canvas.freeDrawingBrush) {\n        canvas.freeDrawingBrush = new fabric[drawingModeEl.value + \"Brush\"]();\n      }\n      let brush = canvas.freeDrawingBrush;\n      brush.width = brushSize || 11;\n      brush.color = currColor || \"#005E7A\";\n      setCanvas(canvas);\n    }\n  }\n\n  function handleDraw() {\n    console.log(\"handleDraw triggered!\");\n    setCanvas(canvas);\n    let drawingCanvasJSON = canvas.toJSON();\n    console.log(\"front end emiting drawingtoJSON:\", drawingCanvasJSON);\n    // socket.emit(\"send new lines\", drawingCanvasJSON);\n    socket.emit(\"send new lines\", drawingCanvasJSON);\n  }\n\n  return (\n    <div>\n      <Title2></Title2>\n      <PlayArea\n        onClick={() => {\n          handleDraw();\n        }}\n      >\n        <CanvasBackground>\n          <StyledCanvas id=\"canvas\"></StyledCanvas>\n        </CanvasBackground>\n      </PlayArea>\n\n      <Palette>\n        <div id=\"drawing-mode-options\" style={{ marginTop: \"10px\" }}>\n          <label\n            htmlFor=\"drawing-mode-selector\"\n            style={{ marginRight: \"8px\", fontWeight: \"bold\", fontSize: \"14px\" }}\n          >\n            Brushes:\n          </label>\n          <select id=\"drawing-mode-selector\" onChange={() => updateBrush()}>\n            <option value=\"Pencil\">Pencil</option>\n            <option value=\"Circle\">Circle</option>\n            <option value=\"Pattern\">Pattern</option>\n          </select>\n        </div>\n        <BrushSizesContainer>\n          <div style={{ marginTop: \"2px\", marginRight: \"2px\" }}>\n            {/* Brush Sizes: */}\n          </div>\n          <SmallBrushBtn\n            onClick={() => {\n              setBrushSize(5);\n            }}\n          >\n            <img src=\"/images/point.png\" style={{ width: \"30%\" }} />\n          </SmallBrushBtn>\n          <MedBrushBtn\n            onClick={() => {\n              setBrushSize(15);\n            }}\n          >\n            <img src=\"/images/point.png\" style={{ width: \"90%\" }} />\n          </MedBrushBtn>\n          <LargeBrushBtn\n            onClick={() => {\n              setBrushSize(35);\n            }}\n          >\n            <img src=\"/images/point.png\" style={{ height: \"90%\" }} />\n          </LargeBrushBtn>\n        </BrushSizesContainer>\n        <SelectedColor>\n          <div\n            id=\"selectedColor\"\n            style={{\n              backgroundColor: currColor,\n              height: \"30px\",\n              width: \"30px\",\n            }}\n          ></div>\n        </SelectedColor>\n        <PaletteColors>\n          <PaletteComp currColor={currColor} setColor={setColor} />\n        </PaletteColors>\n\n        <PngButton onClick={() => canvas.clear()}>\n          <img\n            src=\"/images/trashBtn.png\"\n            style={{ width: \"100%\", marginTop: \"2px\" }}\n          />\n        </PngButton>\n        <PngButton onClick={() => setColor(\"white\")}>\n          <img\n            src=\"/images/eraser3.png\"\n            style={{ width: \"100%\", marginTop: \"2px\" }}\n          />\n        </PngButton>\n      </Palette>\n\n      <div>test!</div>\n    </div>\n  );\n};\n\nexport default DrawingCanvas;\n","import React from \"react\";\n\nimport {\n  StartDrawBtn,\n  StartWriteBtn,\n  LandingButton,\n  LandingBtns,\n  LandingPage,\n  StartDrawImg,\n  StartWriteImg,\n} from \"./AppCSS\";\n\nconst LandingPageComp = () => {\n  return (\n    <div>\n      <LandingPage>\n        <LandingBtns>\n          <StartDrawBtn>\n            <a href=\"/draw\" style={{ color: \"black\" }}>\n              <StartDrawImg>\n                {\" \"}\n                {/* <img src=\"/images/drawBtn.png\" /> */}\n              </StartDrawImg>\n              <LandingButton>Start Drawing Collab</LandingButton>\n            </a>\n          </StartDrawBtn>\n        </LandingBtns>\n        <LandingBtns>\n          <StartWriteBtn>\n            <a href=\"/write\" style={{ color: \"black\" }}>\n              {\" \"}\n              <StartWriteImg>\n                {/* <img src=\"/images/writeBtn.png\" /> */}\n              </StartWriteImg>\n              <LandingButton>Start Writing Collab</LandingButton>\n            </a>\n          </StartWriteBtn>\n        </LandingBtns>\n      </LandingPage>\n    </div>\n  );\n};\n\nexport default LandingPageComp;\n","import React, { useState } from 'react'\nimport Routes from \"./Routes\";\nimport { LandingPage, Paragraph, DownloadBtn } from \"./AppCSS\"\n\nconst EndGame = () => {\n    const [finalImage, setFinalImage] = useState(\"\")\n\n    const handleDownloadBtn = () => {\n        console.log('clicked download')\n        //grab image json data from local storage\n        //send json data to dataURL method with type jpeg\n\n    }\n\n    return (\n        <LandingPage>\n            <Paragraph>Want to save this collab?</Paragraph>\n            <DownloadBtn onClick={() => handleDownloadBtn()}>Download</DownloadBtn>\n        </LandingPage>\n    )\n}\n\nexport default EndGame","import React, { useState, useEffect } from \"react\"\nimport Modal from \"styled-react-modal\"\nimport { StyledModal } from \"./AppCSS\"\n\nconst ModalComp = () => {\n    const [isOpen, setIsOpen] = useState(false)\n\n    const toggleModal = () => {\n        setIsOpen(!isOpen)\n    }\n\n    const timer = () => {\n        setTimeout(toggleModal, 10000)\n        console.log('timer has run')\n    }\n\n    useEffect(() => {\n        toggleModal()\n    }, [])\n\n    return (\n        <div>\n\n            <StyledModal\n                isOpen={isOpen}\n                onLoad={timer()}\n            >Game starts in 10 seconds!</StyledModal>\n        </div>\n    )\n}\n\nexport default ModalComp","import React, { useState, useEffect } from \"react\";\nimport { fabric } from \"fabric\";\nimport {\n  Title2,\n  StyledCanvas,\n  PlayArea,\n  CanvasBackground,\n  Palette,\n  PngButton,\n  PaletteColors,\n  SmallBrushBtn,\n  MedBrushBtn,\n  LargeBrushBtn,\n  BrushSizesContainer,\n  SelectedColor,\n  AddTxtBtn,\n} from \"./AppCSS\";\nimport PaletteComp from \"./Palette\";\nimport socket from \"./Socket\";\n\n//storing color, brush size, font and canvas in state\n\nconst CombinedCanvas = () => {\n  const [canvas, setCanvas] = useState(\"\");\n  const [currColor, setColor] = useState(\"#005E7A\");\n  const [brushSize, setBrushSize] = useState(11);\n  const [font, setFont] = useState(\"arial\");\n\n  //creates initial canvas\n  useEffect(() => {\n    setCanvas(initCanvas());\n  }, []);\n\n  useEffect(() => {\n    if (canvas) {\n      updateBrush();\n\n      socket.on(\"load new lines\", (value) => {\n        console.log(\"drawing received in front end: \", value);\n        canvas.loadFromJSON(value);\n        setCanvas(canvas);\n      });\n    }\n  }, [canvas]);\n\n  useEffect(() => {\n    if (currColor) {\n      updateBrush();\n    }\n  }, [currColor]);\n\n  useEffect(() => {\n    if (brushSize && canvas.freeDrawingBrush) {\n      updateBrush();\n    }\n  }, [brushSize]);\n\n  let drawingModeEl = document.getElementById(\"drawing-mode-selector\");\n\n  const initCanvas = () =>\n    new fabric.Canvas(\"canvas\", {\n      height: 600,\n      width: 800,\n      backgroundColor: \"white\",\n      isDrawingMode: true,\n    });\n\n  function updateBrush() {\n    if (canvas) {\n      if (!canvas.freeDrawingBrush) {\n        canvas.freeDrawingBrush = new fabric[drawingModeEl.value + \"Brush\"]();\n      }\n      let brush = canvas.freeDrawingBrush;\n      brush.width = brushSize || 11;\n      brush.color = currColor || \"#005E7A\";\n      setCanvas(canvas);\n    }\n  }\n\n  function handleDraworWrite() {\n    console.log(\"handleDraw triggered!\");\n    setCanvas(canvas);\n    let canvasJSON = canvas.toJSON();\n    console.log(\"front end emiting combinedCanvas:\", canvasJSON);\n    // socket.emit(\"send new lines\", drawingCanvasJSON);\n    socket.emit(\"send new lines\", canvasJSON);\n  }\n\n  // text logic\n  const handleTextBtn = () => {\n    const newText = new fabric.IText(\"Type here...\", {\n      left: 150,\n      top: 100,\n      isContentEditable: true,\n      fontFamily: font,\n    });\n\n    setCanvas(canvas.add(newText).renderAll());\n    let canvasJSON = canvas.toJSON();\n    socket.emit(\"add text box\", canvasJSON);\n  };\n\n  const changeFont = (evt) => {\n    setFont(evt.target.value);\n    canvas.getActiveObject().setSelectionStyles({\n      fontFamily: font,\n    });\n    canvas.renderAll();\n  };\n\n  return (\n    <div>\n      <Title2></Title2>\n      <PlayArea\n        onClick={() => {\n          handleDraworWrite();\n        }}\n      >\n        <CanvasBackground>\n          <StyledCanvas id=\"canvas\"></StyledCanvas>\n        </CanvasBackground>\n      </PlayArea>\n\n      <Palette>\n        <div id=\"drawing-mode-options\" style={{ marginTop: \"10px\" }}>\n          <label\n            htmlFor=\"drawing-mode-selector\"\n            style={{ marginRight: \"8px\", fontWeight: \"bold\", fontSize: \"14px\" }}\n          >\n            Brushes:\n          </label>\n          <select id=\"drawing-mode-selector\" onChange={() => updateBrush()}>\n            <option value=\"Pencil\">Pencil</option>\n            <option value=\"Circle\">Circle</option>\n            <option value=\"Pattern\">Pattern</option>\n          </select>\n        </div>\n        <BrushSizesContainer>\n          <div style={{ marginTop: \"2px\", marginRight: \"2px\" }}>\n            {/* Brush Sizes: */}\n          </div>\n          <SmallBrushBtn\n            onClick={() => {\n              setBrushSize(5);\n            }}\n          >\n            <img src=\"/images/point.png\" style={{ width: \"30%\" }} />\n          </SmallBrushBtn>\n          <MedBrushBtn\n            onClick={() => {\n              setBrushSize(15);\n            }}\n          >\n            <img src=\"/images/point.png\" style={{ width: \"90%\" }} />\n          </MedBrushBtn>\n          <LargeBrushBtn\n            onClick={() => {\n              setBrushSize(35);\n            }}\n          >\n            <img src=\"/images/point.png\" style={{ height: \"90%\" }} />\n          </LargeBrushBtn>\n        </BrushSizesContainer>\n        <SelectedColor>\n          <div\n            id=\"selectedColor\"\n            style={{\n              backgroundColor: currColor,\n              height: \"30px\",\n              width: \"30px\",\n            }}\n          ></div>\n        </SelectedColor>\n        <PaletteColors>\n          <PaletteComp currColor={currColor} setColor={setColor} />\n        </PaletteColors>\n\n        <PngButton onClick={() => canvas.clear()}>\n          <img\n            src=\"/images/trashBtn.png\"\n            style={{ width: \"100%\", marginTop: \"2px\" }}\n          />\n        </PngButton>\n        <PngButton onClick={() => setColor(\"white\")}>\n          <img\n            src=\"/images/eraser3.png\"\n            style={{ width: \"100%\", marginTop: \"2px\" }}\n          />\n        </PngButton>\n      </Palette>\n      <Palette>\n        {\"Text Palette:\"}\n        <div id=\"text-options\" style={{ marginTop: \"10px\" }}>\n          <label htmlFor=\"font-family\">Font:</label>\n          <select id=\"font-family\" value={font} onChange={changeFont}>\n            <option value=\"Arial\">Arial</option>\n            <option value=\"comic sans ms\">Comic Sans MS</option>\n            <option value=\"impact\">Impact</option>\n            <option value=\"monaco\">Monaco</option>\n          </select>\n        </div>\n        <AddTxtBtn onClick={() => handleTextBtn()}>Add Text</AddTxtBtn>\n      </Palette>\n      <div>test!</div>\n    </div>\n  );\n};\n\nexport default CombinedCanvas;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport WritingCanvas from \"./WritingCanvas\";\nimport DrawingCanvas from \"./DrawingCanvas\";\nimport LandingPageComp from \"./LandingPage\";\nimport EndGame from \"./EndGame\";\n// Importing Modal for testing\nimport ModalComp from \"./Modal\";\nimport CombinedCanvas from \"./CombinedCanvas\";\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/\" component={LandingPageComp} />\n        <Route path=\"/write\" component={WritingCanvas} />\n        <Route path=\"/draw\" component={DrawingCanvas} />\n        <Route path=\"/end\" component={EndGame} />\n        {/* Route for testing Modal component */}\n        <Route path=\"/testing\" component={ModalComp} />\n        <Route path=\"/combined\" component={CombinedCanvas} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import React, { useState } from \"react\";\nimport Routes from \"./Routes\";\nimport {\n  // Button,\n  Body,\n  Header,\n  Title,\n  // StartDrawBtn,\n  // StartWriteBtn,\n  // LandingBtns,\n  // LandingPage,\n  // StartDrawImg,\n} from \"./AppCSS\";\n// import LandingPageComp from \"./LandingPage\";\n\nfunction App() {\n  const [loadClient, setLoadClient] = useState(true);\n\n  return (\n    <Body className=\"App\">\n      <Header className=\"App-header\">\n        <Title>\n          <a href=\"/\">\n            <img src=\"/images/logoSm.png\" />\n          </a>\n        </Title>\n      </Header>\n      <div>\n        <Routes />\n      </div>\n    </Body>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}