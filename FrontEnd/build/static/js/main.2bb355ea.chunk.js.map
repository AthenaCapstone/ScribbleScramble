{"version":3,"sources":["AppCSS.js","Socket.js","WritingCanvas.js","DrawingCanvas.js","Routes.js","App.js","reportWebVitals.js","index.js"],"names":["Body","styled","div","Header","header","Button","Link","button","Title","h1","Title2","h2","PlayArea","StyledCanvas","canvas","CanvasBackground","socket","socketIOClient","on","console","log","WritingCanvas","useState","textCanvas","setTextCanvas","font","setFont","useEffect","fabric","Canvas","height","width","isContentEditable","value","newText","IText","left","top","add","renderAll","onClick","fontFamily","toObject","dataUrl","toDataURL","emit","handleTextBtn","id","htmlFor","onChange","evt","target","getActiveObject","setSelectionStyles","DrawingCanvas","setCanvas","initCanvas","drawingColorEl","document","getElementById","drawingModeEl","drawingLineWidthEl","brushSizeText","backgroundColor","isDrawingMode","updateBrush","freeDrawingBrush","brush","parseInt","innerHTML","color","type","defaultValue","min","max","onMouseDown","clear","Routes","path","component","App","setLoadClient","className","href","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2bb355ea.chunk.js","sourcesContent":["import styled, {css} from 'styled-components'\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nexport const Body = styled.div`\n    display: flex;\n    flex-flow: column wrap;\n    width: 100%;\n    background: #7c8483;\n`\n    \nexport const Header = styled.header`\n    background: #71a2b6;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 70px;\n    border-radius: 20px;\n`\n\nexport const StyledLink = styled(Link)`\n    color: darkgrey;\n    font-weight: bold;\n`\nexport const Button = styled.button`\n    background: transparent;\n    border-radius: 3px;\n    border: 2px solid darkgrey;\n    align: center;\n    color: black;\n    margin: 0 1em;\n    padding: 0.25em 1em;\n`\nexport const Title = styled.h1`\n    font-size: 2em;\n    text-align: center;\n    color: #982649;\n`\nexport const Title2 = styled.h2`\n    font-size: 2em;\n    text-align: center;\n    color: white;\n`\n\nexport const PlayArea = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nexport const StyledCanvas = styled.canvas`\n    width: 450px;\n    margin: auto;\n    border: 3px outset black;\n    border-radius: 3px;\n    z-index: 2; \n`\nexport const CanvasBackground = styled.div`\n    display: flex;\n    width: 800px;\n    border-radius: 3px; \n    background: white;\n    z-index: 1\n`","import socketIOClient from \"socket.io-client\";\nconst SERVER = \"http://127.0.0.1:4001\";\n\nconst socket = socketIOClient(SERVER);\n\n//maybe this should be connection?\n// index.js serverSocket is on \"connection\"\nsocket.on(\"connect\", () => {\n  console.log(\"i'm connected with the front end!\");\n});\nexport default socket;\n","import React, { useState, useEffect, useRef } from \"react\";\nimport { fabric } from \"fabric\";\nimport { Button, Title2, Body } from \"./AppCSS\";\nimport { StyledCanvas } from \"./AppCSS\";\nimport { PlayArea } from \"./AppCSS\";\nimport { CanvasBackground } from \"./AppCSS\";\nimport socket from \"./Socket\";\n\nconst WritingCanvas = () => {\n  const [textCanvas, setTextCanvas] = useState(\"\");\n  const [font, setFont] = useState(\"arial\");\n  const initCanvas = () =>\n    new fabric.Canvas(\"canvas\", {\n      height: 600,\n      width: 800,\n      isContentEditable: true,\n    });\n\n  /*\n    Removed 'canvas' as a parameter in the initCanvas function, set add and renderAll\n    methods to act on textCanvas. \n\n    Thought: we're getting a data url value now from backend (value) â€”> maybe need to convert \n    back to an object for display?\n    */\n  useEffect(() => {\n    setTextCanvas(initCanvas());\n    socket.on(\"create new text box\", (value) => {\n      // let text = value.toObject();\n      console.log(\"front end heard create new text box\");\n      const newText = new fabric.IText(\"Type here...\", {\n        left: 150,\n        top: 100,\n        isContentEditable: true,\n        // fontFamily: font,\n      });\n      textCanvas.add(newText);\n      textCanvas.renderAll();\n    });\n  }, []);\n\n  const handleTextBtn = () => {\n    const newText = new fabric.IText(\"Type here...\", {\n      left: 150,\n      top: 100,\n      isContentEditable: true,\n      fontFamily: font,\n    });\n\n    let sendBackText = textCanvas.toObject();\n\n    console.log(\"textCanvas\", textCanvas);\n    textCanvas.add(newText);\n    textCanvas.renderAll();\n    let dataUrl = textCanvas.toDataURL();\n    //sending data url to back end via socket\n    // console.log('data url: ', dataUrl)\n    socket.emit(\"add text box\", dataUrl);\n  };\n\n  const changeFont = (evt) => {\n    setFont(evt.target.value);\n    textCanvas.getActiveObject().setSelectionStyles({\n      fontFamily: font,\n    });\n    textCanvas.renderAll();\n  };\n\n  return (\n    <Body>\n      <Title2>Writing Canvas !</Title2>\n      <Button onClick={() => handleTextBtn()}>Add Text</Button>\n      <div id=\"text-options\">\n        <label htmlFor=\"font-family\">Font:</label>\n        <select id=\"font-family\" value={font} onChange={changeFont}>\n          <option value=\"arial\">Arial</option>\n          <option value=\"comic sans ms\">Comic Sans MS</option>\n          <option value=\"impact\">Impact</option>\n          <option value=\"monaco\">Monaco</option>\n        </select>\n      </div>\n      <PlayArea>\n        <CanvasBackground>\n          <StyledCanvas id=\"canvas\"></StyledCanvas>\n        </CanvasBackground>\n      </PlayArea>\n    </Body>\n  );\n};\n\nexport default WritingCanvas;\n","import React, { useState, useEffect } from \"react\";\nimport { fabric } from \"fabric\";\nimport {\n  Button,\n  Title2,\n  StyledCanvas,\n  PlayArea,\n  CanvasBackground,\n} from \"./AppCSS\";\n\nconst DrawingCanvas = () => {\n  const [canvas, setCanvas] = useState(\"\");\n\n  useEffect(() => {\n    setCanvas(initCanvas());\n  }, []);\n\n  // useEffect(() => {\n  //   if (canvas.freeDrawingBrush) {\n  //     updateBrush();\n  //     // console.log(\"second useEffect\");\n  //   }\n  //   // setBrushSize()\n  //   // setBrushColor()\n  // }, [canvas]);\n\n  let drawingColorEl = document.getElementById(\"drawing-color\");\n  let drawingModeEl = document.getElementById(\"drawing-mode-selector\");\n  let drawingLineWidthEl = document.getElementById(\"drawing-line-width\");\n  let brushSizeText = document.getElementById(\"brushSize\");\n  // maybe need to position with value inside canvas\n  const initCanvas = () =>\n    new fabric.Canvas(\"canvas\", {\n      height: 600,\n      width: 800,\n      backgroundColor: \"white\",\n      isDrawingMode: true,\n    });\n\n  // fabric.Object.prototype.transparentCorners = false;\n\n  function updateBrush(canvas) {\n    if (!canvas.freeDrawingBrush) {\n      // console.log(\"no free drawing brush\");\n      canvas.freeDrawingBrush = new fabric[drawingModeEl.value + \"Brush\"]();\n    }\n\n    let brush = canvas.freeDrawingBrush;\n    brush.width = parseInt(drawingLineWidthEl.value, 10) || 1;\n    brushSizeText.innerHTML = drawingLineWidthEl.value;\n    brush.color = drawingColorEl.value;\n  }\n\n  return (\n    <div>\n      <div id=\"drawing-mode-options\">\n        <label htmlFor=\"drawing-mode-selector\">Mode:</label>\n        <select id=\"drawing-mode-selector\" onChange={() => updateBrush(canvas)}>\n          <option value=\"Pencil\">Pencil</option>\n          <option value=\"Circle\">Circle</option>\n          <option value=\"Pattern\">Pattern</option>\n        </select>\n\n        <label htmlFor=\"drawing-line-width\">Line width:</label>\n        <span id=\"brushSize\">11</span>\n        <input\n          type=\"range\"\n          defaultValue=\"11\"\n          min=\"0\"\n          max=\"150\"\n          id=\"drawing-line-width\"\n          onChange={() => updateBrush(canvas)}\n        />\n\n        <label htmlFor=\"drawing-color\">Line color:</label>\n        <input\n          type=\"color\"\n          defaultValue=\"#005E7A\"\n          id=\"drawing-color\"\n          onChange={() => updateBrush(canvas)}\n        />\n      </div>\n\n      <Title2>Drawing Canvas!</Title2>\n      <PlayArea>\n        <CanvasBackground>\n          <StyledCanvas\n            id=\"canvas\"\n            onClick={() => updateBrush(canvas)}\n            onMouseDown={() => updateBrush(canvas)}\n          ></StyledCanvas>\n        </CanvasBackground>\n      </PlayArea>\n      <Button onClick={() => canvas.clear()}>clear</Button>\n    </div>\n  );\n};\n\nexport default DrawingCanvas;\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport WritingCanvas from \"./WritingCanvas\"\nimport DrawingCanvas from \"./DrawingCanvas\";\n\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route path=\"/write\" component={WritingCanvas} />\n        <Route path=\"/draw\" component={DrawingCanvas} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import React, { useState } from \"react\";\nimport Routes from \"./Routes\";\nimport socket from \"./Socket\";\nimport { Button, Body, Header, Title } from \"./AppCSS\";\n\nfunction App() {\n  const [loadClient, setLoadClient] = useState(true);\n\n  return (\n    <Body className=\"App\">\n      <Header className=\"App-header\">\n        <Title>\n          <a href=\"/\">Scribble Scramble</a>\n        </Title>\n      </Header>\n      <div>\n        <Routes />\n        <Button onClick={() => setLoadClient((prevState) => !prevState)}>\n          Stop Client\n        </Button>\n        {/* {loadClient && } */}\n      </div>\n      <a href=\"/write\">I want to write!</a>\n      <a href=\"/draw\">I want to draw!</a>\n    </Body>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}