{"version":3,"sources":["AppCSS.js","WritingCanvas.js","DrawingCanvas.js","Drawing.js","String.js","Routes.js","Socket.js","App.js","reportWebVitals.js","index.js"],"names":["Body","styled","div","Header","header","Button","Link","button","Title","h1","Title2","h2","PlayArea","StyledCanvas","canvas","CanvasBackground","WritingCanvas","useState","textCanvas","setTextCanvas","useEffect","fabric","Canvas","height","width","isContentEditable","onClick","newText","IText","left","top","add","renderAll","handleTextBtn","id","htmlFor","DrawingCanvas","setCanvas","initCanvas","drawingColorEl","document","getElementById","drawingModeEl","drawingLineWidthEl","brushSizeText","backgroundColor","isDrawingMode","updateBrush","freeDrawingBrush","value","brush","parseInt","innerHTML","color","Object","prototype","transparentCorners","onChange","type","defaultValue","min","max","onMouseDown","clear","Drawing","String","Routes","exact","path","component","SocketComp","response","setResponse","socket","socketIOClient","on","data","console","log","disconnect","dateTime","App","loadClient","setLoadClient","className","prevState","Socket","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.626bd551.chunk.js","sourcesContent":["import styled, {css} from 'styled-components'\nimport { BrowserRouter as Router, Link } from \"react-router-dom\";\n\nexport const Body = styled.div`\n    display: flex;\n    flex-flow: column wrap;\n    width: 100%;\n    background: #7c8483;\n`\n    \nexport const Header = styled.header`\n    background: #71a2b6;\n    justify-content: center;\n    align-items: center;\n    width: 100%;\n    height: 70px;\n    border-radius: 20px;\n`\n\nexport const StyledLink = styled(Link)`\n    color: darkgrey;\n    font-weight: bold;\n`\nexport const Button = styled.button`\n    background: transparent;\n    border-radius: 3px;\n    border: 2px solid darkgrey;\n    align: center;\n    color: black;\n    margin: 0 1em;\n    padding: 0.25em 1em;\n`\nexport const Title = styled.h1`\n    font-size: 2em;\n    text-align: center;\n    color: #982649;\n`\nexport const Title2 = styled.h2`\n    font-size: 2em;\n    text-align: center;\n    color: white;\n`\n\nexport const PlayArea = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n`\n\nexport const StyledCanvas = styled.canvas`\n    width: 450px;\n    margin: auto;\n    border: 3px outset black;\n    border-radius: 3px;\n    z-index: 2; \n`\nexport const CanvasBackground = styled.div`\n    display: flex;\n    width: 800px;\n    border-radius: 3px; \n    background: white;\n    z-index: 1\n`","import React, { useState, useEffect } from \"react\";\nimport { fabric } from \"fabric\";\nimport { Button, Title2, Body } from \"./AppCSS\";\nimport { StyledCanvas } from \"./AppCSS\"\nimport { PlayArea } from \"./AppCSS\"\nimport { CanvasBackground } from \"./AppCSS\"\n\nconst WritingCanvas = () => {\n  const [textCanvas, setTextCanvas] = useState(\"\");\n\n  const initCanvas = () =>\n    new fabric.Canvas(\"canvas\", {\n      height: 600,\n      width: 800,\n      isContentEditable: true,\n    });\n\n  useEffect(() => {\n    setTextCanvas(initCanvas());\n  }, []);\n\n  const handleTextBtn = (canvas) => {\n    const newText = new fabric.IText(\"Type here...\", {\n      left: 150,\n      top: 100,\n      isContentEditable: true,\n    });\n    canvas.add(newText);\n    canvas.renderAll();\n  };\n\n  return (\n    <Body>\n      <Title2>Writing Canvas !</Title2>\n      <Button onClick={() => handleTextBtn(textCanvas)}>Add Text</Button>\n      <div id=\"text-options\">\n        <label htmlFor=\"font-selector\">Font:</label>\n        <select id=\"font-selector\">\n          <option>Comic Sans</option>\n          <option>Literally anything but Comic Sans</option>\n        </select>\n      </div>\n      <PlayArea>\n      <CanvasBackground>\n      <StyledCanvas\n        id=\"canvas\"\n      ></StyledCanvas>\n      </CanvasBackground>\n      </PlayArea>\n    </Body>\n  );\n};\n\nexport default WritingCanvas;\n","import React, { useState, useEffect } from \"react\";\nimport { fabric } from \"fabric\";\n// import { copiedText } from \"fabric/fabric-impl\";\nimport { Button, Title2 } from \"./AppCSS\";\nimport { StyledCanvas } from \"./AppCSS\";\nimport { PlayArea } from \"./AppCSS\";\nimport { CanvasBackground } from \"./AppCSS\";\n\n// import { clientSocket } from \"./Socket\";\n\n// clientSocket.on(\"connect\", () => {\n//   console.log(\"client socket!\");\n// });\n\nconst DrawingCanvas = () => {\n  const [canvas, setCanvas] = useState(\"\");\n\n  useEffect(() => {\n    setCanvas(initCanvas());\n  }, []);\n\n  // useEffect(() => {\n  //   clientSocket.on(\"connect\", () => {\n  //     console.log(\"client socket!\");\n  //   });\n  // });\n\n  let drawingColorEl = document.getElementById(\"drawing-color\");\n  let drawingModeEl = document.getElementById(\"drawing-mode-selector\");\n  let drawingLineWidthEl = document.getElementById(\"drawing-line-width\");\n  let brushSizeText = document.getElementById(\"brushSize\");\n  // maybe need to position with value inside canvas\n  const initCanvas = () =>\n    new fabric.Canvas(\"canvas\", {\n      height: 600,\n      width: 800,\n      backgroundColor: \"white\",\n      isDrawingMode: true,\n      // freeDrawingBrush: new fabric.PencilBrush(),\n    });\n\n  // canvas.freeDrawingBrush.width = drawingLineWidthEl.value;\n\n  // let getElement = function (id) {\n  //   return document.getElementById(\"id\");\n  // };\n\n  // var cursor = new fabric.StaticCanvas(\"cursor\");\n\n  // canvas.freeDrawingBrush.width = 20;\n  // canvas.freeDrawingBrush.color = \"#ff0000\";\n\n  // let canvasEl = document.getElementById(\"canvas\");\n\n  // let drawingModeEl = getElement(\"drawing-mode-selector\");\n  // let drawingColorEl = getElement(\"drawing-color\");\n  // // let drawingLineWidthEl = getElement(\"drawing-line-width\");\n\n  // function updateBrush(canvas){\n  //   if(canvas.freeDrawingBrush){\n  //     let brush=canvas.freeDrawingBrush\n  //     brush.width\n  //   }\n  // }\n  // canvas.freeDrawingBrush = new fabric[drawingModeEl.value + \"Brush\"](canvas);\n  // canvas.freeDrawingBrush = new fabric[drawingModeEl.value + \"Brush\"](canvas);\n\n  // canvasEl.onclick(updateBrush(canvas));\n\n  fabric.Object.prototype.transparentCorners = false;\n\n  // let pencil = new fabric.PencilBrush(canvas);\n  // let brush = canvas.freeDrawingBrush;\n\n  // let brush = canvas.freeDrawingBrush;\n  function updateBrush(canvas) {\n    // console.log(\"updateBrush\");\n    if (!canvas.freeDrawingBrush) {\n      // console.log(\"no free drawing brush\");\n      canvas.freeDrawingBrush = new fabric[drawingModeEl.value + \"Brush\"]();\n    }\n    // console.log(\"after free drawing brush\");\n\n    let brush = canvas.freeDrawingBrush;\n    brush.width = parseInt(drawingLineWidthEl.value, 10) || 1;\n    brushSizeText.innerHTML = drawingLineWidthEl.value;\n    brush.color = drawingColorEl.value;\n    // canvas.renderAll();\n  }\n\n  // updateBrush(canvas);\n\n  return (\n    <div>\n      <div id=\"drawing-mode-options\">\n        <label htmlFor=\"drawing-mode-selector\">Mode:</label>\n        <select id=\"drawing-mode-selector\" onChange={() => updateBrush(canvas)}>\n          <option value=\"Pencil\">Pencil</option>\n          <option value=\"Circle\">Circle</option>\n          <option value=\"Pattern\">Pattern</option>\n        </select>\n\n        <label htmlFor=\"drawing-line-width\">Line width:</label>\n        <span id=\"brushSize\">11</span>\n        <input\n          type=\"range\"\n          defaultValue=\"11\"\n          min=\"0\"\n          max=\"150\"\n          id=\"drawing-line-width\"\n          onChange={() => updateBrush(canvas)}\n        />\n\n        <label htmlFor=\"drawing-color\">Line color:</label>\n        <input\n          type=\"color\"\n          defaultValue=\"#005E7A\"\n          id=\"drawing-color\"\n          onChange={() => updateBrush(canvas)}\n        />\n      </div>\n\n      <Title2>Drawing Canvas !</Title2>\n      <PlayArea>\n        <CanvasBackground>\n          <StyledCanvas\n            id=\"canvas\"\n            onClick={() => updateBrush(canvas)}\n            onMouseDown={() => updateBrush(canvas)}\n          ></StyledCanvas>\n        </CanvasBackground>\n      </PlayArea>\n      <Button onClick={() => canvas.clear()}>clear</Button>\n    </div>\n  );\n};\n\nexport default DrawingCanvas;\n\n// Other code i tried\n//could be useful for other brushes\n\n//Brushes to make->\n// Clear All X\n// Width  X\n// Color   X\n// Eraser\n// Fill Tool\n// Fun Brushes\n\n// function changeBrush(canvas, value) {\n//   canvas.freeDrawingBrush = new fabric[value + \"Brush\"](canvas);\n//   let brush = canvas.freeDrawingBrush;\n//   brush.width = parseInt(drawingLineWidthEl.value, 10) || 1;\n// }\n\n// let pencil = new fabric.PencilBrush(canvas);\n// pencil.color = \"blue\";\n\n// function changeColor(canvas, value) {\n//   if (canvas.freeDrawingBrush) {\n//     let brush = canvas.freeDrawingBrush;\n//     // console.log(\"drawingColorEl\", drawingColorEl);\n//     brush.color = value;\n//     brush.width = parseInt(drawingLineWidthEl.value, 10) || 1;\n//     console.log(\"value\", value);\n//     // console.log(\"this\", this);\n//   } else {\n//     // canvas.freeDrawingBrush = new fabric[value + \"Brush\"](canvas);\n//     // let brush = canvas.freeDrawingBrush;\n//     // brush.color = drawingColorEl.value;\n//     // console.log(\"drawingColorEl\", drawingColorEl);\n//   }\n// }\n\n// let brushColor;\n// let brushWidth;\n// let clear;\n\n//   var brush = canvas.freeDrawingBrush=\n\n// Can save current brush like this:\n// canvas.freeDrawingBrush = brush\n// canvas.freeDrawingBrush = diamondBrush? for ex\n\n// let brush = new fabric.PatternBrush(canvas);\n\n//   let ctx = brush.getContext(\"2d\");\n//   ctx.fillStyle = \"blue\";\n//   .width(20);\n//   brush.color = \"000FFF\";\n//   brush.getPatternSrc = function () {};\n//   brush.strokeStyle = \"blue\";\n\n// ADDS SQUARE:\n//   var rect = new fabric.Rect({\n//     width: 200,\n//     height: 200,\n//     // angle: 45,\n//     fill: \"blue\",\n//   });\n//   canvas.add(rect);\n\n//   function isDrawing() {\n//     canvas.isDrawingMode();\n//   let context = canvas.getContext(\"2d\");\n//   context.strokeStyle = \"blue\";\n//   context.lineWidth = 5;\n\n//   }\n","import React from \"react\";\n// import { fabric } from \"fabric\";\nimport CanvasComp from \"./Canvas\";\nimport DrawingCanvas from \"./DrawingCanvas.js\";\n\nconst Drawing = () => {\n  return (\n    <div>\n      Drawing.js Canvas below\n      <DrawingCanvas />\n    </div>\n  );\n};\n\nexport default Drawing;\n","import React from 'react'\n// import { fabric } from 'fabric'\n// import CanvasComp from './Canvas'\nimport WritingCanvas from './WritingCanvas'\n\nconst String = () => {\n    return (\n        <div>Hiya\n            {/* <WritingCanvas /> */}\n        </div>\n    )\n}\n\nexport default String","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport WritingCanvas from \"./WritingCanvas\"\nimport Drawing from \"./Drawing\";\nimport String from \"./String\"\n\nconst Routes = () => {\n  return (\n    <Router>\n      <Switch>\n        <Route exact path=\"/write\" component={WritingCanvas} />\n        <Route exact path=\"/draw\" component={Drawing} />\n        <Route exact path=\"/string\" component={String} />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import React, { useState, useEffect } from \"react\";\nimport socketIOClient from \"socket.io-client\";\nconst ENDPOINT = \"http://127.0.0.1:4001\";\n\nconst SocketComp = () => {\n  const [response, setResponse] = useState(\"\");\n\n  useEffect(() => {\n    const socket = socketIOClient(ENDPOINT);\n    socket.on(\"FromAPI\", (data) => {\n      console.log(\"data inside client from API: \", data);\n      setResponse(data);\n    });\n    return () => socket.disconnect();\n  }, []);\n\n  //broadcast all lines\n  // export function broadcastLines(callback) {\n  //   socket.on(\"linesToState\", callback);\n  // }\n\n  return (\n    <div>\n      <p>\n        It's <time dateTime={response}>{response}</time>\n      </p>\n    </div>\n  );\n};\n\nexport default SocketComp;\n","import React, { useState } from \"react\";\nimport Routes from \"./Routes\";\nimport SocketComp from \"./Socket\";\nimport { Button, Body, Header, Title } from \"./AppCSS\";\n\nfunction App() {\n  const [loadClient, setLoadClient] = useState(true);\n\n  return (\n    <Body className=\"App\">\n      <Header className=\"App-header\">\n        <Title>Scribble Scramble</Title>\n      </Header>\n      <div>\n        <Routes />\n        <Button onClick={() => setLoadClient((prevState) => !prevState)}>\n          Stop Client\n        </Button>\n        {loadClient && <SocketComp />}\n      </div>\n    </Body>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}